server:
  port: 8080

spring:
  application:
    name: ddd-chulsi-api
  profiles:
    active: ${SPRING_PROFILES_ACTIVE}
  config:
    import: "optional:configserver:http://config.jeffrey-oh.click/"
  cloud:
    config:
      name: chulsi
      profile: ${SPRING_PROFILES_ACTIVE}
      username: ${CONFIG_SERVER_USERNAME}
      password: ${CONFIG_SERVER_PASSWORD}
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 50MB
  jpa:
    database: mysql # 데이터베이스
    database-platform: org.hibernate.dialect.MySQLDialect # 데이터베이스 방언 설정, Hinbernate 가 MySQL에 맞게 쿼리문 생성
    show-sql: true # 하이버네이트 쿼리문 콘솔 표시 여부
    generate-ddl: false # DDL 생성 여부
    open-in-view: false # jpa 성닝이슈 때문에 false로 권장. true일 경우 영속성 컨텍스트가 트랜잭션 범위를 넘어선 레이어까지 살아있다.
    hibernate:
      connection:
        provider_class: org.hibernate.hikaricp.internal.HikariCPConnectionProvider
      ddl-auto: validate # create update validate none
      #use-new-id-generator-mappings: true # JPA 표준에 맞는 새로운 키 생성 전략을 사용함.
    properties:
      hibernate.connection.provider_disables_autocommit: false # ID 관련되어서 하이버네이트 속성에 따른 생성
      hibernate:
        function_contributor: com.ddd.chulsi.infrastructure.config.datasource.MySQLContributor # 내장함수 사용을 위해 커스텀 파일로 등록
        enable_lazy_load_no_trans: true
        format_sql: true # 하이버네이트 sql문 포맷 정렬 여부
      jdbc:
        order_updates: true
        batch_versioned_data: false
  datasource:
    hikari: # connection-timeout :  pool에서 connect 얻을 때 최대 대기시간이며, 기본 30초임
      poolName: SpringBootJPAHikariCP # 풀 이름 지정
      minimum-idle: 10 # 최소 커넥션 풀 생성. 기본 maximum-pool-size 에 맞춰 생성
      maximum-pool-size: 90 # 최대 커넥션 풀 허용 개수. 기본 10개
      idle-timeout: 10000 # pool 에서 유휴 상태로 최대 유지시킬 수 있는 시간, minimum 이 maximum 보다 사이즈가 작을 때 동작함
      max-lifetime: 1800000 # 커넥션 최대 유지시간 (db wait_timeout 보다 2~3초 짧게 설정하라)
      connection-timeout: 10000 # 커넥션 풀에서 connection을 얻을 때 최대 대기 시간을 설정한다. 못 구할 시 익셉션 발생.
      #validation-timeout: 30000 커넥션이 유효한지 검사할 때 대기 시간을 지정한다. 이 값초은 connectionTimeout보다 작아야 한다. 허용 가능한 최소 값은 250이다.
      auto-commit: false # 커넥션 풀 auto commit 여부
      data-source-properties: # JPA 최적화 작업 # 디비 통신 관련          #(PreparedStatement : 여러 방대한 SQL의 처리하기 위해 효율성을 높이기 위해 사용
        cachePrepStmts: true # 데이터 캐싱과 관련된 옵션 기본적으로 캐싱을 비활성화 하고 있음. 활성화 여부
        prepStmtCacheSize: 250 # Connection마다 캐싱할 PreparedStatement의 개수를 지정하는 옵션이다. HikariCP에서는 250 ~ 500개 추천
        prepStmtCacheSqlLimit: 2048 # 캐싱할 PreparedStatement의 최대 길이를 지정하는 옵션이다
        useServerPrepStmts: true # Server-Side PreparedStatement를 사용하는 옵션이다. Server-Side PreparedStatement를 사용해 preparedStatement를 캐싱할 경우, 꽤 큰 성능 향상을 기대할 수 있다.

  mvc:
    throw-exception-if-no-handler-found: true

  web:
    resources:
      add-mappings: false

encrypt:
  key: ${CONFIG_SERVER_ENCRYPT_KEY}

jwt:
  access-expires-time: 7200 # 2 시간
  refresh-expires-time: 1209600 # 2 주

logging:
  level: # 로깅 레벨
    root: INFO # 로킹 레벨 설정